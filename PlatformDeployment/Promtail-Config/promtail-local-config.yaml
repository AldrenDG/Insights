---
clients:
  - tenant_id: machine1
    url: 'http://localhost:3100/loki/api/v1/push'
positions:
  filename: 'C:/InSights/Insights_Deployment/Server2/PLG/promtail-windows-amd64.exe/positions.yaml'
scrape_configs:
  - job_name: platformgrafana
    pipeline_stages:
      - match:
          selector: '{job="platformgrafana"}'
          stages:
            - json:
                expressions:
                  dashboardId: dashboardId
                  dashboardName: dashboardName
                  datasourceName: datasourceName
                  datasourceType: datasourceType
                  email: email
                  orgName: orgName
                  panelCount: panelCount
                  panelName: panelName
                  query: query
                  time_ms: time_ms
                  timestamp: timestamp
                  uid: uid
                  userName: userName
            - labels:
                dashboardId:
                dashboardName:
                datasourceName:
                datasourceType:
                email:
                orgName:
                panelCount:
                panelName:
                query:
                time_ms:
                timestamp:
                uid:
                userName:
    static_configs:
      - labels:
          __path__: 'C:/InSights/Insights_Deployment/Server2/grafana-7.1.0/data/log/grafana.log'
          job: platformgrafana
          tenant_id: grafanamachine
        targets:
          - localhost
  - job_name: platformEngine
    pipeline_stages:
      - match:
          selector: '{job="platformEngine"} |= "Type=AgentEngine"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=.*Type=(?P<Type>\\S+).*toolName=(?P<toolName>\\S+).*category=(?P<category>\\S+).*agentId=(?P<agentId>\\S+).*routingKey=(?P<routingKey>\\S+).*dataSize=(?P<dataSize>-?\\d+).*execId=(?P<execId>\\S+).*ProcessingTime=(?P<ProcessingTime>-?\\d+)(?P<message>.*)"
            - labels:
                ProcessingTime:
                Type:
                agentId:
                category:
                dataSize:
                execId:
                filename:
                funcName:
                lineno:
                lvl:
                message:
                routingKey:
                thread:
                timeStamp:
                toolName:
      - match:
          selector: '{job="platformEngine"} |= "Type=WebhookEngine"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=.*Type=(?P<Type>\\S+).*toolName=(?P<toolName>\\S+).*category=(?P<category>\\S+).*webhookName=(?P<webhookName>\\S+).*routingKey=(?P<routingKey>\\S+).*dataSize=(?P<dataSize>-?\\d+).*execId=(?P<execId>\\S+).*ProcessingTime=(?P<ProcessingTime>-?\\d+)(?P<message>.*)"
            - labels:
                ProcessingTime:
                Type:
                webhookName:
                category:
                dataSize:
                execId:
                filename:
                funcName:
                lineno:
                lvl:
                message:
                routingKey:
                thread:
                timeStamp:
                toolName:
      - match:
          selector: '{job="platformEngine"} |= "Type=DataArchival"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=.*Type=(?P<Type>\\S+).*toolName=(?P<toolName>\\S+).*category=(?P<category>\\S+).*agentId=(?P<agentId>\\S+).*routingKey=(?P<routingKey>\\S+).*execId=(?P<execId>\\S+)(?P<message>.*)"
            - labels:
                agentId:
                category:
                execId:
                filename:
                funcName:
                lineno:
                lvl:
                message:
                routingKey:
                thread:
                timeStamp:
                toolName:
      - match:
          selector: '{job="platformEngine"} |= "Type=OfflineDataProcessing"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=.*Type=(?P<Type>\\S+).*execId=(?P<execId>\\S+).*offlineProcessingFileName=(?P<offlineProcessingFileName>\\S+).*queryName=(?P<queryName>\\S+).*ProcessingTime=(?P<ProcessingTime>\\d+).*processedRecords=(?P<processedRecords>\\d+)(?P<message>.*)"
            - labels:
                ProcessingTime:
                Type:
                execId:
                filename:
                funcName:
                lineno:
                lvl:
                message:
                offlineProcessingFileName:
                processedRecords:
                queryName:
                thread:
                timeStamp:
      - match:
          selector: '{job="platformEngine"} |= "Type=Correlator"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=.*Type=(?P<Type>\\S+).*execId=(?P<execId>\\d+).*correlationName=(?P<correlationName>\\S+).*sourceTool=(?P<sourceTool>\\S+).*destinationTool=(?P<destinationTool>\\S+).*ProcessingTime=(?P<ProcessingTime>\\d+).*processedRecords=(?P<processedRecords>\\d+)(?P<message>.*)"
            - labels:
                ProcessingTime:
                Type:
                execId:
                filename:
                funcName:
                lineno:
                lvl:
                message:
                offlineProcessingFileName:
                processedRecords:
                queryName:
                thread:
                timeStamp:
      - match:
          selector: '{job="platformEngine"} |= "printHibernateStatistics"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=.*startTime\\s(?P<startTime>\\d+).*endTime\\s(?P<endTime>\\d+)"
            - labels:
                endTime:
                filename:
                funcName:
                lineno:
                lvl:
                startTime:
                thread:
                timeStamp:
      - match:
          selector: '{job="platformEngine"} |= "Type=HibernateStatistics" |= "printHibernateStatistics"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=Type=(?P<Type>\\S+).*className=(?P<className>\\S+).*methodName=(?P<methodName>\\S+).*lineNo=(?P<lineNo>\\d+).*serviceFileName=(?P<serviceFileName>\\S+).*serviceFileLineNo=(?P<serviceFileLineNo>\\d+).*processingTime=(?P<processingTime>\\d+).*sourceProperty=(?P<sourceProperty>[\\S\\s]+).*rows=(?P<rows>\\d+)"
            - labels:
                Type:
                className:
                filename:
                funcName:
                lineNo:
                lineno:
                lvl:
                methodName:
                processingTime:
                rows:
                serviceFileLineNo:
                serviceFileName:
                sourceProperty:
                thread:
                timeStamp:
      - match:
          selector: '{job="platformEngine"} |= "neo4jCommunication"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=Type=(?P<Type>\\S+).*className=(?P<className>\\S+).*methodName=(?P<methodName>\\S+).*lineNo=(?P<lineNo>\\d+).*Datasource=(?P<Datasource>\\S+).*ProcessingTime=(?P<ProcessingTime>\\d+).*rowCount=(?P<rowCount>\\d+).*queryList=(?P<queryList>[\\S\\s]+)"
            - labels:
                Datasource:
                ProcessingTime:
                Type:
                className:
                filename:
                funcName:
                lineNo:
                lineno:
                lvl:
                methodName:
                queryList:
                rowCount:
                thread:
                timeStamp:
      - match:
          selector: '{job="platformEngine"} |= "WebhookHealth"'
          stages:
            - regex:
                expression: "t=(?P<timeStamp>\\S+ \\S+).*lvl=(?P<lvl>\\S+).*\\[(?P<thread>\\S+)\\]\\:(?P<filename>\\S+)\\.(?P<funcName>\\S+)\\(\\)(?P<lineno>\\d+).*message=(?P<message>.*).*routingKey=(?P<routingKey>\\S+).*status=(?P<status>.*).*serverPort=(?P<serverPort>\\d+)"
            - labels:
                filename:
                funcName:
                lineno:
                lvl:
                message:
                routingKey:
                serverPort:
                status:
                thread:
                timeStamp:
    static_configs:
      - labels:
          __path__: 'C:/InSights/Insights_Deployment/Server2/INSIGHTS_HOME/logs/PlatformEngine/platformEngine.log'
          job: platformEngine
          tenant_id: machine1
        targets:
          - localhost
server:
  grpc_listen_port: 0
  http_listen_port: 9080
target_config:
  sync_period: 10s
